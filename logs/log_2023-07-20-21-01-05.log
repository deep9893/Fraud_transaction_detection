[2023-07-20 21:01:07,519]^;INFO^;234^;configuration.py^;get_training_pipeline_config()^;Training pipleine config: TrainingPipelineConfig(artifact_dir='D:\\Study\\ml_pipeline\\Fraud_transaction_detection\\fraud_detection_artifact\\artifact')
[2023-07-20 21:01:07,519]^;INFO^;234^;configuration.py^;get_training_pipeline_config()^;Training pipleine config: TrainingPipelineConfig(artifact_dir='D:\\Study\\ml_pipeline\\Fraud_transaction_detection\\fraud_detection_artifact\\artifact')
[2023-07-20 21:01:07,519]^;INFO^;234^;configuration.py^;get_training_pipeline_config()^;Training pipleine config: TrainingPipelineConfig(artifact_dir='D:\\Study\\ml_pipeline\\Fraud_transaction_detection\\fraud_detection_artifact\\artifact')
[2023-07-20 21:01:07,528]^;INFO^;66^;configuration.py^;get_data_ingestion_config()^;Data Ingestion config: DataIngestionConfig(dataset_download_url='https://drive.google.com/uc?export=download&confirm=6gh6&id=1VNpyNkGxHdskfdTNRSjjyNa5qC9u0JyV', raw_data_dir='D:\\Study\\ml_pipeline\\Fraud_transaction_detection\\fraud_detection_artifact\\artifact\\data_ingestion\\2023-07-20-21-01-05\\raw_data', ingested_train_dir='D:\\Study\\ml_pipeline\\Fraud_transaction_detection\\fraud_detection_artifact\\artifact\\data_ingestion\\2023-07-20-21-01-05\\ingested_data\\train', ingested_test_dir='D:\\Study\\ml_pipeline\\Fraud_transaction_detection\\fraud_detection_artifact\\artifact\\data_ingestion\\2023-07-20-21-01-05\\ingested_data\\test', dataset_location='D:\\Study\\ml_pipeline\\Fraud.csv')
[2023-07-20 21:01:07,528]^;INFO^;19^;data_ingestion.py^;__init__()^;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Data Ingestion log started.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 
[2023-07-20 21:01:07,529]^;INFO^;55^;data_ingestion.py^;get_housing_data()^; Raw data Directory ...
[2023-07-20 21:01:15,579]^;INFO^;65^;data_ingestion.py^;get_housing_data()^;File copied from D:\Study\ml_pipeline\Fraud.csv to D:\Study\ml_pipeline\Fraud_transaction_detection\fraud_detection_artifact\artifact\data_ingestion\2023-07-20-21-01-05\raw_data\Fraud.csv
[2023-07-20 21:01:15,579]^;INFO^;42^;data_ingestion.py^;download_housing_data()^;Downloading file from :[https://drive.google.com/uc?export=download&confirm=6gh6&id=1VNpyNkGxHdskfdTNRSjjyNa5qC9u0JyV] into :[D:\Study\ml_pipeline\Fraud_transaction_detection\fraud_detection_artifact\artifact\data_ingestion\2023-07-20-21-01-05\raw_data\Fraud.csv]
[2023-07-20 21:01:49,429]^;INFO^;44^;data_ingestion.py^;download_housing_data()^;File :[D:\Study\ml_pipeline\Fraud_transaction_detection\fraud_detection_artifact\artifact\data_ingestion\2023-07-20-21-01-05\raw_data\Fraud.csv] has been downloaded successfully.
[2023-07-20 21:01:49,429]^;INFO^;80^;data_ingestion.py^;split_data_as_train_test()^;Reading csv file: [D:\Study\ml_pipeline\Fraud_transaction_detection\fraud_detection_artifact\artifact\data_ingestion\2023-07-20-21-01-05\raw_data\Fraud.csv]
[2023-07-20 21:02:34,695]^;INFO^;99^;data_ingestion.py^;split_data_as_train_test()^;Splitting data into train and test
[2023-07-20 21:02:34,778]^;INFO^;117^;data_ingestion.py^;split_data_as_train_test()^;Exporting training datset to file: [D:\Study\ml_pipeline\Fraud_transaction_detection\fraud_detection_artifact\artifact\data_ingestion\2023-07-20-21-01-05\ingested_data\train\Fraud.csv]
[2023-07-20 21:02:35,079]^;INFO^;122^;data_ingestion.py^;split_data_as_train_test()^;Exporting test dataset to file: [D:\Study\ml_pipeline\Fraud_transaction_detection\fraud_detection_artifact\artifact\data_ingestion\2023-07-20-21-01-05\ingested_data\test\Fraud.csv]
[2023-07-20 21:02:35,193]^;INFO^;131^;data_ingestion.py^;split_data_as_train_test()^;Data Ingestion artifact:[DataIngestionArtifact(train_file_path='D:\\Study\\ml_pipeline\\Fraud_transaction_detection\\fraud_detection_artifact\\artifact\\data_ingestion\\2023-07-20-21-01-05\\ingested_data\\train\\Fraud.csv', test_file_path='D:\\Study\\ml_pipeline\\Fraud_transaction_detection\\fraud_detection_artifact\\artifact\\data_ingestion\\2023-07-20-21-01-05\\ingested_data\\test\\Fraud.csv', is_ingested=True, message='Data ingestion completed successfully.')]
[2023-07-20 21:02:35,978]^;INFO^;40^;data_validation.py^;is_train_test_file_exists()^;Checking if training and test file is available
[2023-07-20 21:02:35,978]^;INFO^;52^;data_validation.py^;is_train_test_file_exists()^;Is train and test file exists?-> True
[2023-07-20 21:04:34,278]^;INFO^;122^;data_validation.py^;initiate_data_validation()^;Data validation artifact: DataValidationArtifact(schema_file_path='D:\\Study\\ml_pipeline\\Fraud_transaction_detection\\config\\schema.yaml', report_file_path='D:\\Study\\ml_pipeline\\Fraud_transaction_detection\\fraud_detection_artifact\\artifact\\data_validation\\2023-07-20-21-01-05\\report.json', report_page_file_path='D:\\Study\\ml_pipeline\\Fraud_transaction_detection\\fraud_detection_artifact\\artifact\\data_validation\\2023-07-20-21-01-05\\report.html', is_validated=True, message='Data Validation performed successully.')
[2023-07-20 21:04:34,278]^;INFO^;149^;configuration.py^;get_data_transformation_config()^;Data transformation config: DataTransformationConfig(transformed_train_dir='D:\\Study\\ml_pipeline\\Fraud_transaction_detection\\fraud_detection_artifact\\artifact\\data_transformation\\2023-07-20-21-01-05\\transformed_data\\train', transformed_test_dir='D:\\Study\\ml_pipeline\\Fraud_transaction_detection\\fraud_detection_artifact\\artifact\\data_transformation\\2023-07-20-21-01-05\\transformed_data\\test', preprocessed_object_file_path='D:\\Study\\ml_pipeline\\Fraud_transaction_detection\\fraud_detection_artifact\\artifact\\data_transformation\\2023-07-20-21-01-05\\preprocessed\\preprocessed.pkl')
[2023-07-20 21:04:34,278]^;INFO^;29^;data_transformation.py^;__init__()^;>>>>>>>>>>>>>>>>>>>>Data Transformation log started.<<<<<<<<<<<<<<<<<<<< 
[2023-07-20 21:04:34,279]^;INFO^;74^;data_transformation.py^;initiate_data_transformation()^;Obtaining preprocessing object.
[2023-07-20 21:04:34,289]^;INFO^;60^;data_transformation.py^;get_data_transformer_object()^;Numerical columns: ['step', 'amount', 'newbalanceOrig', 'newbalanceDest', 'isFlaggedFraud']
[2023-07-20 21:04:34,293]^;INFO^;89^;data_transformation.py^;initiate_data_transformation()^;Obtaining training and test file path.
[2023-07-20 21:04:34,293]^;INFO^;96^;data_transformation.py^;initiate_data_transformation()^;Loading training and test data as pandas dataframe.
[2023-07-20 21:04:34,353]^;INFO^;106^;data_transformation.py^;initiate_data_transformation()^;Categorical columns dropped: ['type', 'nameOrig', 'nameDest']
[2023-07-20 21:04:34,353]^;INFO^;110^;data_transformation.py^;initiate_data_transformation()^;Splitting input and target feature from training and testing dataframe.
[2023-07-20 21:04:34,358]^;INFO^;117^;data_transformation.py^;initiate_data_transformation()^;Applying preprocessing object on training dataframe and testing dataframe
[2023-07-20 21:04:34,381]^;INFO^;135^;data_transformation.py^;initiate_data_transformation()^;Saving transformed training and testing array.
[2023-07-20 21:04:34,383]^;INFO^;142^;data_transformation.py^;initiate_data_transformation()^;Saving preprocessing object.
[2023-07-20 21:04:34,388]^;INFO^;152^;data_transformation.py^;initiate_data_transformation()^;Data transformationa artifact: DataTransformationArtifact(is_transformed=True, message='Data transformation successfull.', transformed_train_file_path='D:\\Study\\ml_pipeline\\Fraud_transaction_detection\\fraud_detection_artifact\\artifact\\data_transformation\\2023-07-20-21-01-05\\transformed_data\\train\\Fraud.npz', transformed_test_file_path='D:\\Study\\ml_pipeline\\Fraud_transaction_detection\\fraud_detection_artifact\\artifact\\data_transformation\\2023-07-20-21-01-05\\transformed_data\\test\\Fraud.npz', preprocessed_object_file_path='D:\\Study\\ml_pipeline\\Fraud_transaction_detection\\fraud_detection_artifact\\artifact\\data_transformation\\2023-07-20-21-01-05\\preprocessed\\preprocessed.pkl')
[2023-07-20 21:04:34,388]^;INFO^;158^;data_transformation.py^;__del__()^;====================Data Transformation log completed.==================== 


[2023-07-20 21:04:34,388]^;INFO^;182^;configuration.py^;get_model_trainer_config()^;Model trainer config: ModelTrainerConfig(trained_model_file_path='D:\\Study\\ml_pipeline\\Fraud_transaction_detection\\fraud_detection_artifact\\artifact\\model_trainer\\2023-07-20-21-01-05\\trained_model\\model.pkl', base_accuracy=0.5, model_config_file_path='config\\model.yaml', overfit_score=0.05)
[2023-07-20 21:04:34,388]^;INFO^;46^;model_trainer.py^;__init__()^;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Model trainer log started.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 
[2023-07-20 21:04:34,388]^;INFO^;54^;model_trainer.py^;initiate_model_trainer()^;Loading transformed training dataset
[2023-07-20 21:04:34,409]^;INFO^;58^;model_trainer.py^;initiate_model_trainer()^;Loading transformed testing dataset
[2023-07-20 21:04:34,419]^;INFO^;62^;model_trainer.py^;initiate_model_trainer()^;Splitting training and testing input and target feature
[2023-07-20 21:04:34,421]^;INFO^;66^;model_trainer.py^;initiate_model_trainer()^;Extracting model config file path
[2023-07-20 21:04:34,421]^;INFO^;69^;model_trainer.py^;initiate_model_trainer()^;Initializing model factory class using above model config file: config\model.yaml
[2023-07-20 21:04:34,438]^;INFO^;74^;model_trainer.py^;initiate_model_trainer()^;Expected accuracy: 0.5
[2023-07-20 21:04:34,438]^;INFO^;77^;model_trainer.py^;initiate_model_trainer()^;overfit_score: 0.05
[2023-07-20 21:04:34,438]^;INFO^;79^;model_trainer.py^;initiate_model_trainer()^;Initiating operation model selection
[2023-07-20 21:04:34,438]^;INFO^;382^;model_factory.py^;get_best_model()^;Started Initializing model from config file
[2023-07-20 21:04:34,438]^;INFO^;227^;model_factory.py^;class_for_name()^;Executing command: from <module 'sklearn.linear_model' from 'D:\\Study\\ml_pipeline\\Fraud_transaction_detection\\env\\lib\\site-packages\\sklearn\\linear_model\\__init__.py'> import LogisticRegression
[2023-07-20 21:04:34,449]^;INFO^;206^;model_factory.py^;update_property_of_class()^;Executing:$ LogisticRegression().fit_intercept=True
[2023-07-20 21:04:34,453]^;INFO^;206^;model_factory.py^;update_property_of_class()^;Executing:$ LogisticRegression().penalty=l2
[2023-07-20 21:04:34,453]^;INFO^;227^;model_factory.py^;class_for_name()^;Executing command: from <module 'sklearn.neighbors' from 'D:\\Study\\ml_pipeline\\Fraud_transaction_detection\\env\\lib\\site-packages\\sklearn\\neighbors\\__init__.py'> import KNeighborsClassifier
[2023-07-20 21:04:34,453]^;INFO^;206^;model_factory.py^;update_property_of_class()^;Executing:$ KNeighborsClassifier().n_neighbors=5
[2023-07-20 21:04:34,453]^;INFO^;206^;model_factory.py^;update_property_of_class()^;Executing:$ KNeighborsClassifier().algorithm=kd_tree
[2023-07-20 21:04:34,453]^;INFO^;384^;model_factory.py^;get_best_model()^;Initialized model: [InitializedModelDetail(model_serial_number='module_0', model=LogisticRegression(), param_grid_search={'C': [0.1, 1, 10, 30, 100]}, model_name='sklearn.linear_model.LogisticRegression'), InitializedModelDetail(model_serial_number='module_1', model=KNeighborsClassifier(algorithm='kd_tree'), param_grid_search={'weights': ['uniform', 'distance']}, model_name='sklearn.neighbors.KNeighborsClassifier')]
[2023-07-20 21:04:34,453]^;INFO^;227^;model_factory.py^;class_for_name()^;Executing command: from <module 'sklearn.model_selection' from 'D:\\Study\\ml_pipeline\\Fraud_transaction_detection\\env\\lib\\site-packages\\sklearn\\model_selection\\__init__.py'> import GridSearchCV
[2023-07-20 21:04:34,458]^;INFO^;206^;model_factory.py^;update_property_of_class()^;Executing:$ GridSearchCV(estimator=LogisticRegression(),
             param_grid={'C': [0.1, 1, 10, 30, 100]}).cv=5
[2023-07-20 21:04:34,459]^;INFO^;206^;model_factory.py^;update_property_of_class()^;Executing:$ GridSearchCV(cv=5, estimator=LogisticRegression(),
             param_grid={'C': [0.1, 1, 10, 30, 100]}).verbose=2
[2023-07-20 21:04:34,459]^;INFO^;260^;model_factory.py^;execute_grid_search_operation()^;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> f"Training LogisticRegression Started." <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[2023-07-20 21:04:36,608]^;INFO^;227^;model_factory.py^;class_for_name()^;Executing command: from <module 'sklearn.model_selection' from 'D:\\Study\\ml_pipeline\\Fraud_transaction_detection\\env\\lib\\site-packages\\sklearn\\model_selection\\__init__.py'> import GridSearchCV
[2023-07-20 21:04:36,608]^;INFO^;206^;model_factory.py^;update_property_of_class()^;Executing:$ GridSearchCV(estimator=KNeighborsClassifier(algorithm='kd_tree'),
             param_grid={'weights': ['uniform', 'distance']}).cv=5
[2023-07-20 21:04:36,608]^;INFO^;206^;model_factory.py^;update_property_of_class()^;Executing:$ GridSearchCV(cv=5, estimator=KNeighborsClassifier(algorithm='kd_tree'),
             param_grid={'weights': ['uniform', 'distance']}).verbose=2
[2023-07-20 21:04:36,608]^;INFO^;260^;model_factory.py^;execute_grid_search_operation()^;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> f"Training KNeighborsClassifier Started." <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[2023-07-20 21:04:37,499]^;INFO^;369^;model_factory.py^;get_best_model_from_grid_searched_best_model_list()^;Acceptable model found:GridSearchedBestModel(model_serial_number='module_0', model=LogisticRegression(), best_model=LogisticRegression(C=100), best_parameters={'C': 100}, best_score=0.9901065449010653)
[2023-07-20 21:04:37,499]^;INFO^;375^;model_factory.py^;get_best_model_from_grid_searched_best_model_list()^;Best model: GridSearchedBestModel(model_serial_number='module_0', model=LogisticRegression(), best_model=LogisticRegression(C=100), best_parameters={'C': 100}, best_score=0.9901065449010653)
[2023-07-20 21:04:37,499]^;INFO^;82^;model_trainer.py^;initiate_model_trainer()^;Best model found on training dataset: GridSearchedBestModel(model_serial_number='module_0', model=LogisticRegression(), best_model=LogisticRegression(C=100), best_parameters={'C': 100}, best_score=0.9901065449010653)
[2023-07-20 21:04:37,499]^;INFO^;84^;model_trainer.py^;initiate_model_trainer()^;Extracting trained model list.
[2023-07-20 21:04:37,499]^;INFO^;88^;model_trainer.py^;initiate_model_trainer()^;Evaluation all trained model on training and testing dataset both
[2023-07-20 21:04:37,499]^;INFO^;67^;model_factory.py^;evaluate_classification_model()^;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Started evaluating model: [LogisticRegression] <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[2023-07-20 21:04:37,528]^;INFO^;77^;model_factory.py^;evaluate_classification_model()^;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Score <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[2023-07-20 21:04:37,528]^;INFO^;78^;model_factory.py^;evaluate_classification_model()^;Train recall		 Test recall		
[2023-07-20 21:04:37,528]^;INFO^;79^;model_factory.py^;evaluate_classification_model()^;0.98152634766808		 0.98152634766808		
[2023-07-20 21:04:37,548]^;INFO^;85^;model_factory.py^;evaluate_classification_model()^;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Score <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[2023-07-20 21:04:37,548]^;INFO^;86^;model_factory.py^;evaluate_classification_model()^;Train Precision		 Test Precision		
[2023-07-20 21:04:37,548]^;INFO^;87^;model_factory.py^;evaluate_classification_model()^;1.0		 1.0		
[2023-07-20 21:04:37,564]^;INFO^;93^;model_factory.py^;evaluate_classification_model()^;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Score <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[2023-07-20 21:04:37,564]^;INFO^;94^;model_factory.py^;evaluate_classification_model()^;Train f1		 Test f1		
[2023-07-20 21:04:37,564]^;INFO^;95^;model_factory.py^;evaluate_classification_model()^;0.9906770594528505		 0.9906770594528505		
[2023-07-20 21:04:37,569]^;INFO^;106^;model_factory.py^;evaluate_classification_model()^;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Score <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[2023-07-20 21:04:37,569]^;INFO^;107^;model_factory.py^;evaluate_classification_model()^;Train Score		 Test Score		 Average Score
[2023-07-20 21:04:37,569]^;INFO^;108^;model_factory.py^;evaluate_classification_model()^;0.9907153729071537		 0.9907153729071537		0.9907153729071537
[2023-07-20 21:04:37,569]^;INFO^;110^;model_factory.py^;evaluate_classification_model()^;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Loss <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[2023-07-20 21:04:37,569]^;INFO^;111^;model_factory.py^;evaluate_classification_model()^;Diff test train accuracy: [0.0].
[2023-07-20 21:04:37,569]^;INFO^;112^;model_factory.py^;evaluate_classification_model()^;Train root mean squared error: [1.0].
[2023-07-20 21:04:37,569]^;INFO^;113^;model_factory.py^;evaluate_classification_model()^;Test root mean squared error: [1.0].
[2023-07-20 21:04:37,569]^;INFO^;137^;model_factory.py^;evaluate_classification_model()^;Acceptable model found MetricInfoArtifact(model_name='LogisticRegression(C=100)', model_object=LogisticRegression(C=100), train_prec=1.0, test_prec=1.0, train_accuracy=0.9907153729071537, test_accuracy=0.9907153729071537, model_accuracy=0.9907153729071537, index_number=0, overfit_score=0.0). 
[2023-07-20 21:04:37,572]^;INFO^;67^;model_factory.py^;evaluate_classification_model()^;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Started evaluating model: [KNeighborsClassifier] <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[2023-07-20 21:04:37,828]^;INFO^;77^;model_factory.py^;evaluate_classification_model()^;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Score <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[2023-07-20 21:04:37,828]^;INFO^;78^;model_factory.py^;evaluate_classification_model()^;Train recall		 Test recall		
[2023-07-20 21:04:37,828]^;INFO^;79^;model_factory.py^;evaluate_classification_model()^;1.0		 1.0		
[2023-07-20 21:04:37,849]^;INFO^;85^;model_factory.py^;evaluate_classification_model()^;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Score <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[2023-07-20 21:04:37,849]^;INFO^;86^;model_factory.py^;evaluate_classification_model()^;Train Precision		 Test Precision		
[2023-07-20 21:04:37,849]^;INFO^;87^;model_factory.py^;evaluate_classification_model()^;1.0		 1.0		
[2023-07-20 21:04:37,864]^;INFO^;93^;model_factory.py^;evaluate_classification_model()^;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Score <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[2023-07-20 21:04:37,864]^;INFO^;94^;model_factory.py^;evaluate_classification_model()^;Train f1		 Test f1		
[2023-07-20 21:04:37,864]^;INFO^;95^;model_factory.py^;evaluate_classification_model()^;1.0		 1.0		
[2023-07-20 21:04:37,868]^;INFO^;106^;model_factory.py^;evaluate_classification_model()^;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Score <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[2023-07-20 21:04:37,868]^;INFO^;107^;model_factory.py^;evaluate_classification_model()^;Train Score		 Test Score		 Average Score
[2023-07-20 21:04:37,872]^;INFO^;108^;model_factory.py^;evaluate_classification_model()^;1.0		 1.0		1.0
[2023-07-20 21:04:37,872]^;INFO^;110^;model_factory.py^;evaluate_classification_model()^;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Loss <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[2023-07-20 21:04:37,872]^;INFO^;111^;model_factory.py^;evaluate_classification_model()^;Diff test train accuracy: [0.0].
[2023-07-20 21:04:37,872]^;INFO^;112^;model_factory.py^;evaluate_classification_model()^;Train root mean squared error: [1.0].
[2023-07-20 21:04:37,872]^;INFO^;113^;model_factory.py^;evaluate_classification_model()^;Test root mean squared error: [1.0].
[2023-07-20 21:04:37,872]^;INFO^;137^;model_factory.py^;evaluate_classification_model()^;Acceptable model found MetricInfoArtifact(model_name="KNeighborsClassifier(algorithm='kd_tree', weights='distance')", model_object=KNeighborsClassifier(algorithm='kd_tree', weights='distance'), train_prec=1.0, test_prec=1.0, train_accuracy=1.0, test_accuracy=1.0, model_accuracy=1.0, index_number=1, overfit_score=0.0). 
[2023-07-20 21:04:37,872]^;INFO^;92^;model_trainer.py^;initiate_model_trainer()^;Best found model on both training and testing dataset.
[2023-07-20 21:04:37,893]^;INFO^;100^;model_trainer.py^;initiate_model_trainer()^;Saving model at path: D:\Study\ml_pipeline\Fraud_transaction_detection\fraud_detection_artifact\artifact\model_trainer\2023-07-20-21-01-05\trained_model\model.pkl
[2023-07-20 21:04:37,904]^;INFO^;112^;model_trainer.py^;initiate_model_trainer()^;Model Trainer Artifact: ModelTrainerArtifact(is_trained=True, message='Model Trained successfully', trained_model_file_path='D:\\Study\\ml_pipeline\\Fraud_transaction_detection\\fraud_detection_artifact\\artifact\\model_trainer\\2023-07-20-21-01-05\\trained_model\\model.pkl', train_prec=1.0, test_prec=1.0, train_accuracy=1.0, test_accuracy=1.0, model_accuracy=1.0)
[2023-07-20 21:04:37,904]^;INFO^;118^;model_trainer.py^;__del__()^;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Model trainer log completed.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 
[2023-07-20 21:04:37,904]^;INFO^;201^;configuration.py^;get_model_evaluation_config()^;Model Evaluation Config: ModelEvaluationConfig(model_evaluation_file_path='D:\\Study\\ml_pipeline\\Fraud_transaction_detection\\fraud_detection_artifact\\artifact\\model_evaluation\\model_evaluation.yaml', time_stamp='2023-07-20-21-01-05').
[2023-07-20 21:04:37,904]^;INFO^;182^;configuration.py^;get_model_trainer_config()^;Model trainer config: ModelTrainerConfig(trained_model_file_path='D:\\Study\\ml_pipeline\\Fraud_transaction_detection\\fraud_detection_artifact\\artifact\\model_trainer\\2023-07-20-21-01-05\\trained_model\\model.pkl', base_accuracy=0.5, model_config_file_path='config\\model.yaml', overfit_score=0.05)
[2023-07-20 21:04:37,904]^;INFO^;25^;model_evaluation.py^;__init__()^;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Model Evaluation log started.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 
[2023-07-20 21:04:38,001]^;INFO^;108^;model_evaluation.py^;initiate_model_evaluation()^;Converting target column into numpy array.
[2023-07-20 21:04:38,001]^;INFO^;111^;model_evaluation.py^;initiate_model_evaluation()^;Conversion completed target column into numpy array.
[2023-07-20 21:04:38,001]^;INFO^;114^;model_evaluation.py^;initiate_model_evaluation()^;Dropping target column from the dataframe.
[2023-07-20 21:04:38,001]^;INFO^;117^;model_evaluation.py^;initiate_model_evaluation()^;Dropping target column from the dataframe completed.
[2023-07-20 21:04:38,001]^;INFO^;122^;model_evaluation.py^;initiate_model_evaluation()^;Not found any existing model. Hence accepting trained model
[2023-07-20 21:04:38,008]^;INFO^;66^;model_evaluation.py^;update_evaluation_report()^;Previous eval result: {}
[2023-07-20 21:04:38,008]^;INFO^;82^;model_evaluation.py^;update_evaluation_report()^;Updated eval result:{'best_model': {'model_path': 'D:\\Study\\ml_pipeline\\Fraud_transaction_detection\\fraud_detection_artifact\\artifact\\model_trainer\\2023-07-20-21-01-05\\trained_model\\model.pkl'}}
[2023-07-20 21:04:38,010]^;INFO^;126^;model_evaluation.py^;initiate_model_evaluation()^;Model accepted. Model eval artifact ModelEvaluationArtifact(is_model_accepted=True, evaluated_model_path='D:\\Study\\ml_pipeline\\Fraud_transaction_detection\\fraud_detection_artifact\\artifact\\model_trainer\\2023-07-20-21-01-05\\trained_model\\model.pkl') created
[2023-07-20 21:04:38,010]^;INFO^;166^;model_evaluation.py^;__del__()^;====================Model Evaluation log completed.==================== 
[2023-07-20 21:04:38,010]^;INFO^;216^;configuration.py^;get_model_pusher_config()^;Model pusher config ModelPusherConfig(export_dir_path='D:\\Study\\ml_pipeline\\Fraud_transaction_detection\\saved_models\\20230720210438')
[2023-07-20 21:04:38,010]^;INFO^;15^;model_pusher.py^;__init__()^;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Model Pusher log started.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 
[2023-07-20 21:04:38,010]^;INFO^;28^;model_pusher.py^;export_model()^;Exporting model file: [D:\Study\ml_pipeline\Fraud_transaction_detection\saved_models\20230720210438\model.pkl]
[2023-07-20 21:04:38,010]^;INFO^;33^;model_pusher.py^;export_model()^;Trained model: D:\Study\ml_pipeline\Fraud_transaction_detection\fraud_detection_artifact\artifact\model_trainer\2023-07-20-21-01-05\trained_model\model.pkl is copied in export dir:[D:\Study\ml_pipeline\Fraud_transaction_detection\saved_models\20230720210438\model.pkl]
[2023-07-20 21:04:38,010]^;INFO^;39^;model_pusher.py^;export_model()^;Model pusher artifact: [ModelPusherArtifact(is_model_pusher=True, export_model_file_path='D:\\Study\\ml_pipeline\\Fraud_transaction_detection\\saved_models\\20230720210438\\model.pkl')]
[2023-07-20 21:04:38,010]^;INFO^;51^;model_pusher.py^;__del__()^;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Model Pusher log completed.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 
[2023-07-20 21:04:38,010]^;INFO^;134^;pipeline.py^;run_pipeline()^;Model pusher artifact: ModelPusherArtifact(is_model_pusher=True, export_model_file_path='D:\\Study\\ml_pipeline\\Fraud_transaction_detection\\saved_models\\20230720210438\\model.pkl')
[2023-07-20 21:04:38,010]^;INFO^;137^;pipeline.py^;run_pipeline()^;Pipeline completed.
[2023-07-20 21:04:38,010]^;INFO^;15^;main.py^;main()^;main function execution completed.
